package duke.commands;

import java.io.IOException;
import java.util.ArrayList;

import duke.Storage;
import duke.Task;
import duke.TaskList;
import duke.Ui;

/**
 * Represents the command for deleting tasks from the Duke's taskList and hard disk.
 *
 * @author MrTwit99
 * @since 2023-02-06
 */
public class DeleteCommand implements Command {

    /**
     * Returns a String message of the deleted task. Executes delete task command and deletes the task given in the
     * parsedCommand from the taskList and hard disk.
     *
     * @param parsedCmd ArrayList of String type that contains parsed information about the task description and
     *                  status generated by Parser.parse().
     * @param tasks Duke's TaskList object that stores all Tasks objects.
     * @param storage Duke's Storage object to allow file access.
     * @param ui Duke's Ui object to display and print messages to the user. Acts as a screen.
     * @return String message of the deleted task.
     */
    @Override
    public String execute(ArrayList<String> parsedCmd, TaskList tasks, Storage storage, Ui ui) {
        StringBuilder sb = new StringBuilder();
        String message;
        ArrayList<Task> taskList = tasks.getTaskList();
        int taskNumber = Integer.parseInt(parsedCmd.get(1));

        if ((taskNumber <= taskList.size()) && (taskNumber > 0)) { // checks if the task to delete is within list
            Task tempTask = taskList.remove(taskNumber - 1);
            sb.append("    ____________________________________________________________________________________\n")
                    .append("    Noted. I've removed this task:\n")
                    .append("      ").append(tempTask.getTaskInfoStatus())
                    .append("\n    Now you have ").append(taskList.size()).append(" tasks in the list.\n");
            sb.append("    ____________________________________________________________________________________\n");
            message = sb.toString();
            sb.setLength(0);
            try {
                storage.writeToFile(tempTask.getTaskInfo(), "", taskNumber - 1, taskList);
            } catch (IOException e) {
                message = "An unexpected error has occurred: " + e.getMessage();
            }
        } else {
            sb.append("    ____________________________________________________________________________________\n");
            sb.append("    The task you are trying to delete is out of range! Try again!\n");
            sb.append("    ____________________________________________________________________________________\n");
            message = sb.toString();
            sb.setLength(0);
        }
        ui.printCommand(message);
        tasks.updateTaskList(taskList);
        return message;
    }
}

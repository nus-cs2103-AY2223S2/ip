package duke.commands;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.ArrayList;

import duke.Storage;
import duke.Task;
import duke.TaskList;
import duke.Ui;

/**
 * Represents the command for locating tasks that are ONGOING in the Duke's taskList and hard disk.
 *
 * @author MrTwit99
 * @since 2023-02-06
 */
public class ReminderCommand implements Command {

    /**
     * Returns a String message of all tasks that are currently ongoing. Executes the Reminder command and locate
     * all tasks description and statuses that are ongoing.
     *
     * @param parsedCmd ArrayList of String type that contains parsed information about the task description and
     *                  status generated by Parser.parse().
     * @param tasks Duke's TaskList object that stores all Tasks objects
     * @param storage Duke's Storage object to allow file access.
     * @param ui Duke's Ui object to display and print messages to the user. Acts as a screen.
     * @return String message of all tasks description and statues that are ONGOING.
     */
    @Override
    public String execute(ArrayList<String> parsedCmd, TaskList tasks, Storage storage, Ui ui) {
        String message;
        StringBuilder sb = new StringBuilder();
        ArrayList<Task> taskList = tasks.getTaskList();
        int taskIndex = 1; // Used to number the tasks found
        LocalDateTime dateTime = LocalDateTime.now(); // Current date and time
        sb.append("    ____________________________________________________________________________________\n");
        sb.append("    REMINDER!\n").append("    It is currently ");
        sb.append(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM).format(dateTime)).append(".\n");
        sb.append("    These are the tasks that you have to do!!!\n");
        sb.append("    ____________________________________________________________________________________\n");
        sb.append("    Tasks:\n");
        for (int i = 0; i < taskList.size(); i++) {
            if (taskList.get(i).isOngoing()) {
                if (taskList.get(i).getStatus()) {
                    sb.append("    ").append(taskIndex++).append(".").append(taskList.get(i).getTaskInfoStatus())
                            .append("\n");
                }
            }
        }
        sb.append("    ____________________________________________________________________________________\n");
        message = sb.toString();
        sb.setLength(0);
        ui.printCommand(message);
        return message;
    }
}
